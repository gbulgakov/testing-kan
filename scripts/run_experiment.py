import sys
import os
from pathlib import Path

HOME = str(Path.home())
sys.path.append(os.path.join(HOME, 'KAN', 'testing-kan'))

from IPython.display import clear_output

from src.testing_kan import data_processing
from src.testing_kan.tg_bot import send_telegram_file, send_telegram_message
from src.testing_kan.pipelines.tuning import tune
from src.testing_kan.pipelines.testing import test_best_model
from src.testing_kan.logger import Logger
from src.testing_kan.utils import create_zip_archive

from functools import wraps
import traceback
from datetime import datetime

def telegram_error_notification(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_msg = (
                f"*‚ùå –û—à–∏–±–∫–∞*\n\n"
                f"*Model:* `{kwargs.get('model_name', 'N/A')}`\n"
                f"*Dataset:* `{kwargs.get('dataset_name', 'N/A')}`\n"
                f"*Arch type:* `{kwargs.get('arch_type', 'N/A')}`\n"
                f"*Embedding:* `{kwargs.get('emb_name', 'N/A')}`\n"
                f"*Optimizer:* `{kwargs.get('optim_name', 'N/A')}`\n"
                f"*–§—É–Ω–∫—Ü–∏—è:* `{func.__name__}`\n\n"
                f"*–û—à–∏–±–∫–∞:*\n```\n{str(e)}\n```\n\n"
                f"*Traceback:* (–Ω–∞–∂–º–∏—Ç–µ ‚ñ∂Ô∏è)\n"
                f"```\n{traceback.format_exc()}\n```"
            )
            send_telegram_message(error_msg)
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    return wrapper

@telegram_error_notification 
def run_single_model(
        *,
        model_name, 
        arch_type, 
        emb_name, 
        optim_name, 
        dataset, 
        num_epochs, 
        num_trials, 
        patience
):
    best_params = tune(
            model_name=model_name,
            arch_type=arch_type,
            emb_name=emb_name,
            optim_name=optim_name,
            dataset=dataset,
            num_epochs=num_epochs,
            num_trials=num_trials,
            patience=patience
        )
    clear_output(wait=True)
    stats = test_best_model(
        best_params=best_params,
        model_name=model_name,
        arch_type=arch_type,
        emb_name=emb_name,
        optim_name=optim_name,
        dataset=dataset,
        num_epochs=num_epochs,
        patience=patience
    )
    return stats

def run_single_dataset(
        *, 
        dataset_name,
        optim_names, 
        emb_names, 
        model_names, 
        arch_types,
        num_epochs, 
        num_trials, 
        patience, 
        logger
):
    # dataset_type = dataset_info['type']
    zip_path = os.path.join(HOME, 'KAN', 'data', f'{dataset_name}.zip')
    dataset = data_processing.load_dataset(dataset_name, zip_path)

    for model_name in model_names:
        for arch_type in arch_types:
            for optim_name in optim_names:
                for emb_name in emb_names:
                    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ run_single_model –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å
                    stats = run_single_model(
                        model_name=model_name,
                        arch_type=arch_type,
                        emb_name=emb_name,
                        optim_name=optim_name,
                        dataset=dataset,
                        num_epochs=num_epochs,
                        num_trials=num_trials,
                        patience=patience
                    )
                    clear_output(wait=True)
                    
                    # 3. –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ª–æ–≥–≥–µ—Ä–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    logger.log_run(
                        dataset_name=dataset_name,
                        model_name=model_name,
                        arch_type=arch_type,
                        emb_name=emb_name,
                        optim_name=optim_name,
                        stats=stats
                    )


def run_experiment(
    *,
    project_name,
    dataset_names,
    model_names,
    emb_names,
    optim_names,
    arch_types,
    num_epochs,
    num_trials,
    patience,
    exp_name
):
    send_telegram_message(
        f"üöÄ *–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞*\n"
        f"‚ñ´Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{exp_name}`\n"
        f"‚ñ´Ô∏è *–í—Ä–µ–º—è:* `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
    )
    # Logger
    results_dir = os.path.join(HOME, 'KAN', 'testing-kan', 'results')
    logger = Logger(results_dir, exp_name)

    # –ó–∞–ø—É—Å–∫–∏
    for dataset_name in dataset_names:
        run_single_dataset(
            project_name=project_name,
            dataset_name=dataset_name,
            optim_names=optim_names,
            emb_names=emb_names,
            model_names=model_names,
            arch_types=arch_types,
            num_epochs=num_epochs,
            num_trials=num_trials,
            patience=patience,
            logger=logger  # <--- –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        )

    # –í –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã (JSON –∏ CSV)
    logger.save()

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π ZIP-–∞—Ä—Ö–∏–≤
    archive_name = f'{exp_name}_logs.zip'
    archive_path = os.path.join(results_dir, archive_name)
    create_zip_archive(source_dir=results_dir, archive_path=archive_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∏–º–µ–Ω–Ω–æ ZIP-–∞—Ä—Ö–∏–≤
    send_telegram_file(archive_path)
    
    # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_telegram_message(f'‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {exp_name} –∑–∞–≤–µ—Ä—à–µ–Ω. –ê—Ä—Ö–∏–≤ —Å –ª–æ–≥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')

